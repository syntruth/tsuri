// Generated by CoffeeScript 1.6.1

/*
The MIT License (MIT)
Copyright © 2014 Randy Carnahan

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the “Software”), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.</p>

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

VERSION: 1.1.0
*/


(function() {
  var Tsuri;

  Tsuri = (function() {

    function Tsuri(parent, data, id) {
      this.parent = parent || null;
      this.depth = this.parent ? this.parent.depth + 1 : 0;
      this.data = data || {};
      this.id = id || this._nodeId(this.parent);
      this.children = [];
      if (this.parent) {
        this.parent.children.push(this);
      }
    }

    Tsuri.prototype.find = function(finder) {
      var match;
      if (typeof finder !== 'function') {
        return null;
      }
      match = null;
      this.traverseDown(function(node) {
        if (finder.call(this, node)) {
          match = node;
          return false;
        }
      });
      return match;
    };

    Tsuri.prototype.isLeaf = function() {
      if (this.hasChildren()) {
        return false;
      } else {
        return true;
      }
    };

    Tsuri.prototype.isRoot = function() {
      if (this.parent) {
        return false;
      } else {
        return true;
      }
    };

    Tsuri.prototype.path = function(path, separator) {
      var context, index, indexes, _i, _len, _ref;
      if (separator == null) {
        separator = '/';
      }
      if (path[0] === separator) {
        path = path.substring(1);
      }
      indexes = path.split(separator);
      context = this;
      for (_i = 0, _len = indexes.length; _i < _len; _i++) {
        index = indexes[_i];
        index = parseInt(index, 10);
        if ((context != null ? (_ref = context.children) != null ? _ref.length : void 0 : void 0) > index) {
          context = context.children[index];
        } else {
          context = null;
        }
      }
      return context;
    };

    Tsuri.prototype.remove = function() {
      return this._removeChild(this);
    };

    Tsuri.prototype.root = function() {
      var node;
      if (this.isRoot()) {
        return this;
      }
      node = this.parent;
      while (node.parent) {
        node = node.parent;
      }
      return node;
    };

    Tsuri.prototype.siblings = function() {
      var child, _i, _len, _ref, _results;
      if (this.isRoot()) {
        return [];
      }
      _ref = this.parent.children;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (child.id !== this.id) {
          _results.push(child);
        }
      }
      return _results;
    };

    Tsuri.prototype.size = function() {
      return this.toArray().length;
    };

    Tsuri.prototype.appendChild = function(data, id) {
      new Tsuri(this, data, id);
      return this;
    };

    Tsuri.prototype.removeChild = function(arg) {
      if (typeof arg === 'number' && this.children[arg]) {
        return this.children.splice(arg, 1).shift();
      }
      if (arg instanceof Tsuri) {
        return this._removeChild(arg);
      }
      throw new Error("Invalid argument: " + arg);
    };

    Tsuri.prototype.hasChildren = function() {
      return this.children.length > 0;
    };

    Tsuri.prototype.breadthEach = function(iterator) {
      this._traverse(this, iterator, this._breadthEach);
    };

    Tsuri.prototype.each = function(iterator) {
      return this.traverseDown(iterator);
    };

    Tsuri.prototype.postOrderEach = function(iterator) {
      this._traverse(this, iterator, this._postOrderEach);
    };

    Tsuri.prototype.traverseDown = function(iterator) {
      this._traverse(this, iterator, this._traverseDown);
    };

    Tsuri.prototype.traverseUp = function(iterator) {
      this._traverse(this, iterator, this._traverseUp);
    };

    Tsuri.prototype.toArray = function() {
      var nodes;
      nodes = [];
      this.traverseDown(function(node) {
        return nodes.push(node);
      });
      return nodes;
    };

    Tsuri.prototype.toString = function() {
      return this._toStringArray(this).join('\n');
    };

    Tsuri.prototype.toJSON = function(childrenAttr, dataHandler) {
      var walkDown;
      if (childrenAttr == null) {
        childrenAttr = 'children';
      }
      if (typeof dataHandler !== 'function') {
        dataHandler = this._defaultDataHandler;
      }
      walkDown = function(node, parent) {
        var child, data, _i, _len, _ref;
        data = dataHandler(node);
        if (parent) {
          parent[childrenAttr].push(data);
        }
        if (node.hasChildren()) {
          data[childrenAttr] = [];
          _ref = node.children;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            walkDown(child, data);
          }
        }
        return data;
      };
      return walkDown(this);
    };

    Tsuri.prototype._defaultDataHandler = function(node) {
      return node.data;
    };

    Tsuri.prototype._traverse = function(context, iterator, callback) {
      var callIterator, visited;
      visited = [];
      callIterator = function(node) {
        var id, returned;
        id = node.id;
        returned = null;
        if (!(visited.indexOf(id) > -1)) {
          visited.push(id);
          if (iterator.call(node, node) === false) {
            return false;
          }
        }
      };
      callback(context, callIterator);
    };

    Tsuri.prototype._traverseDown = function(context, iterator) {
      var doContinue, walkDown;
      doContinue = true;
      walkDown = function(node) {
        var child, _i, _len, _ref;
        if (!doContinue) {
          return;
        }
        if (iterator(node) === false) {
          doContinue = false;
        } else {
          _ref = node.children;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            walkDown(child);
          }
        }
      };
      walkDown(context);
    };

    Tsuri.prototype._traverseUp = function(context, iterator) {
      var child, _i, _len, _ref;
      while (context) {
        if (iterator(context) === false) {
          return;
        }
        _ref = context.children;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          if (iterator(child) === false) {
            return;
          }
        }
        context = context.parent;
      }
    };

    Tsuri.prototype._breadthEach = function(context, iterator) {
      var child, node, queue, _i, _len, _ref;
      queue = [context];
      while (queue.length !== 0) {
        node = queue.shift();
        if (iterator.call(node, node) === false) {
          return;
        }
        _ref = node.children;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          queue.push(child);
        }
      }
    };

    Tsuri.prototype._postOrderEach = function(context, iterator) {
      var child, children, node, nodes, peek, _i, _len, _ref;
      nodes = [
        {
          node: context,
          visited: false
        }
      ];
      while (nodes.length > 0) {
        peek = nodes[0];
        if (peek.node.children.length > 0 && !peek.visited) {
          peek.visited = true;
          children = [];
          _ref = peek.node.children;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            children.push({
              node: child,
              visited: false
            });
          }
          nodes = children.concat(nodes);
        } else {
          node = nodes.shift().node;
          if (iterator(node) === false) {
            return;
          }
        }
      }
    };

    Tsuri.prototype._removeChild = function(node) {
      var child, idx, parent, value, _i, _len, _ref;
      parent = node.parent;
      value = null;
      _ref = parent.children;
      for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
        child = _ref[idx];
        if (child === node) {
          value = parent.children.splice(idx, 1).shift();
        }
      }
      return value;
    };

    Tsuri.prototype._nodeId = function(parent, separator) {
      if (separator == null) {
        separator = '-';
      }
      if (parent) {
        return [parent.id, parent.children.length].join(separator);
      } else {
        return '0';
      }
    };

    Tsuri.prototype._toStringArray = function(node) {
      var child, indent, lines, _i, _len, _ref;
      lines = [];
      indent = this._toStringIndent(node.depth);
      lines.push("" + indent + node.id);
      _ref = node.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        lines = lines.concat(this._toStringArray(child));
      }
      return lines;
    };

    Tsuri.prototype._toStringIndent = function(num, arrow) {
      var extra, indent, len, _ref;
      if (arrow == null) {
        arrow = '|--> ';
      }
      if (num <= 0) {
        return '';
      }
      indent = '  ';
      extra = ' ';
      len = (_ref = arrow.length) != null ? _ref : 1;
      while (len -= 1) {
        extra += ' ';
      }
      while (num -= 1) {
        indent += extra;
      }
      return "" + indent + arrow;
    };

    return Tsuri;

  })();

  Tsuri.nodeData = function(node, childrenAttr) {
    var attr, data, value;
    if (childrenAttr == null) {
      childrenAttr = 'children';
    }
    data = {};
    for (attr in node) {
      value = node[attr];
      if (attr !== childrenAttr) {
        data[attr] = value;
      }
    }
    return data;
  };

  Tsuri.parse = function(object, childrenAttr) {
    var root, walkDown;
    if (childrenAttr == null) {
      childrenAttr = 'children';
    }
    root = null;
    walkDown = function(node, parent) {
      var child, data, newNode, _i, _len, _ref, _results;
      data = Tsuri.nodeData(node, childrenAttr);
      if (parent) {
        newNode = new Tsuri(parent, data);
      } else {
        newNode = new Tsuri(null, data);
        root = newNode;
      }
      if (node[childrenAttr]) {
        _ref = node[childrenAttr];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          _results.push(walkDown(child, newNode));
        }
        return _results;
      }
    };
    walkDown(object);
    return root;
  };

  if (typeof module !== 'undefined' && module.exports) {
    module.exports = Tsuri;
  } else {
    this.Tsuri = Tsuri;
  }

}).call(this);
